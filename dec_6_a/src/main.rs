use std::mem;

fn main() {
    let mut input = "4,1,1,4,1,1,1,1,1,1,1,1,3,4,1,1,1,3,1,3,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,5,1,2,1,1,5,3,4,2,1,1,4,1,1,5,1,1,5,5,1,1,5,2,1,4,1,2,1,4,5,4,1,1,1,1,3,1,1,1,4,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,2,1,1,1,1,1,1,1,2,4,4,1,1,3,1,3,2,4,3,1,1,1,1,1,2,1,1,1,1,2,5,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,4,1,5,1,3,1,1,1,1,1,5,1,1,1,3,1,2,1,2,1,3,4,5,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,3,1,1,3,1,1,4,1,1,1,1,1,2,1,1,1,1,3,2,1,1,1,4,2,1,1,1,4,1,1,2,3,1,4,1,5,1,1,1,2,1,5,3,3,3,1,5,3,1,1,1,1,1,1,1,1,4,5,3,1,1,5,1,1,1,4,1,1,5,1,2,3,4,2,1,5,2,1,2,5,1,1,1,1,4,1,2,1,1,1,2,5,1,1,5,1,1,1,3,2,4,1,3,1,1,2,1,5,1,3,4,4,2,2,1,1,1,1,5,1,5,2";
    //let mut final_input = vec![];
    //input[0] = 1;

    let mut fish: [u64; 9] = [0; 9];
    input
        .split(',')
        .for_each(|c| fish[c.parse::<usize>().expect("NaN")] += 1);

    println!("{:?}", fish);

    for _ in 0..256 {
        let next_fish = fish[0];
        for j in 0..8 {
            fish[j] = fish[j + 1];
        }
        fish[6] += next_fish;
        fish[8] = next_fish;

        println!("{:?}", fish);



        // for _ in 0..256 {
        //     println!("Am i infinite?");
        //
        //     if input.len() == 26984457539 {
        //         break;
        //     }
        //
        //     for i in 0..input.len() {
        //         if input[i] == 0 {
        //             input[i] = 6;
        //             input.push(8);
        //         } else if input[i] > 0 {
        //             input[i] = input[i] - 1;
        //         }
        //     }
        //     println!("{:?}", input);
        // }
        //
    }
    println!("{:?}", fish);
    println!("{:?}", fish.into_iter().sum::<u64>());
}
